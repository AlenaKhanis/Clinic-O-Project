# version: "3.8"
# services:
#   frontend:
#     container_name: frontend
#     build:
#       context: ./frontend
#       args:
#         - VITE_BACKEND_URL=${BACKEND_URL}:${BACKEND_PORT}
#     ports:
#       - "${FRONTEND_PORT}:80"
#     networks:
#       - app-network
#     depends_on:
#       - backend

#   backend:
#     container_name: backend
#     build:
#       context: ./backend
#     environment:
#       - FLASK_FRONTEND_URL=${FRONTEND_URL}:${FRONTEND_PORT}
#       - NEWS_API_KEY=${NEWS_API_KEY}
#       - DB_PORT=${DB_PORT}
#     env_file:
#       - .env
#     ports:
#       - "${BACKEND_PORT}:8080"
#     depends_on:
#       postgres:
#         condition: service_healthy
#     networks:
#       - app-network

#   nginx:
#     image: nginx:latest
#     container_name: nginx
#     volumes:
#       - ./nginx.conf.template:/etc/nginx/nginx.conf.template:ro
#       - ./frontend/build:/usr/share/nginx/html:ro
#     environment:
#       - FRONTEND_URL=${FRONTEND_URL}
#     ports:
#       - "${NGINX_PORT}:80"
#     depends_on:
#       - frontend
#     networks:
#       - app-network

#   postgres:
#     container_name: postgres-production
#     image: postgres:16-alpine
#     environment:
#       POSTGRES_DB: ${DB_NAME}
#       POSTGRES_USER: ${DB_USER}
#       POSTGRES_PASSWORD: ${DB_PASSWORD}
#     volumes:
#       - ./data:/var/lib/postgresql/data
#     ports:
#       - "${DB_PORT}:5432"
#     networks:
#       - app-network
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

# networks:
#   app-network:

version: "3.8"
services:
  frontend:
    build:
      context: ./frontend
      args:
        - VITE_BACKEND_URL=${BACKEND_URL}:${BACKEND_PORT}
    ports:
      - "${FRONTEND_PORT}:80"
    networks:
      - app-network
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
    environment:
      - FLASK_FRONTEND_URL=${FRONTEND_URL}:${FRONTEND_PORT}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - DB_PORT=${DB_PORT}
    env_file:
      - .env
    ports:
      - "${BACKEND_PORT}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "${NGINX_PORT}:80"
    depends_on:
      - frontend
    networks:
      - app-network

  postgres:
    image: postgres:16-alpine
    container_name: postgres-production
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT}:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
